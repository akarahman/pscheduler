#!/usr/bin/python
#
# Convert a test specification to command-line options

import pscheduler

from validate import spec_is_valid

spec = pscheduler.json_load(exit_on_error=True)

valid, message = spec_is_valid(spec)

if not valid:
    pscheduler.fail(message)

# concatenate oids
oid_list = spec['oid']
oid_str = ""
for item in oid_list:
    oid_str = "%s,%s" % (oid_str, item)
spec['oid'] = oid_str

# concatenate vartypes
vartype_list = spec['vartype']
vartype_str = ""
for item in vartype_list:
    vartype_str = "%s,%s" % (vartype_str, item)
spec['vartype'] = vartype_str

# concatenate varvalues
varvalue_list = spec['varvalue']
varvalue_str = ""
for item in varvalue_list:
    varvalue_str = "%s,%s" % (varvalue_str, item)
spec['varvalue'] = varvalue_str

result = pscheduler.speccli_build_args(spec, 
                                       strings=[
        # Strings
        ( 'host', 'host' ),
        ( 'host-node', 'host-node' ),
        ( 'dest', 'dest' ),
        ('oid', 'oid'),
        ( 'protocol', 'protocol'),
        ('community', 'community'),
        ('version', 'version'),
        ( 'timeout', 'timeout' ),
        ( 'auth-protocol', 'auth-protocol'),
        ( 'security-name', 'security-name'),
        ( 'priv-protocol', 'priv-protocol'),
        ( 'auth-key', 'auth-key'),
        ( 'priv-key', 'priv-key'),
        ( 'security-level', 'security-level'),
        ( 'context', 'context'),
        ( 'vartype', 'vartype'),
        ( 'varvalue', 'varvalue')
        ])


pscheduler.succeed_json(result)
