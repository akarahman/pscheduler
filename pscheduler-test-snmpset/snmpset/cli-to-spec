#!/usr/bin/python
#
# Convert command-line options to a test specification
#

import re
import string
import optparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if type(json_args) != list:
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if type(arg) not in (unicode, str, int, float):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

opt_parser = pscheduler.FailingOptionParser(epilog=
"""Examples:

  task snmpget --version 2c --community public example.net
    text

"""
)


opt_parser.add_option("--host",
                      help="Host to run the test.",
                      action="store", type="string",
                      dest="host")

opt_parser.add_option("--host-node",
                      help="Host to run the test.",
                      action="store", type="string",
                      dest="host_node")

opt_parser.add_option("--dest",
                      help="Destination that will be queried.",
                      action="store", type="string",
                      dest="dest")
                    
opt_parser.add_option("--version",
                      help="Version of SNMP to be used. (1|2c|3)",
                      action="store", type="string",
                      dest="version")

opt_parser.add_option("--oid",
                      help="""
                        List of OIDs to be set, separated by a comma without spaces.

                        Example:

                        --oid sysLocation.0,ipForwarding.1

                        """,
                      action="store", type="string",
                      dest="oid")

opt_parser.add_option("--protocol",
                      help="Transport specifier (tcp|udp)",
                      action="store", type="string",
                      dest="protocol")

opt_parser.add_option("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type="string",
                      dest="timeout")

opt_parser.add_option("--vartype",
                      help="""
                        List of variable types to be set, in the same order as the specified
                        oids themselves. Separated by a comma without spaces.

                        Example:

                        --vartype s,i 

                        """,
                      action="store", type="string",
                      dest="vartype")

opt_parser.add_option("--varvalue",
                      help="""
                        List of values to set the oids to, in the same order as the specified
                        oids themselves. Separated by a comma without spaces.

                        Example:

                        --varvalue Michigan,3 

                        """,
                      action="store", type="string",
                      dest="varvalue")


# snmp v3 specific options
if '3' in args:
   version = 3
   opt_parser.add_option("--security-name",
                      help="Security Name",
                      action="store", type="string",
                      dest="security_name") 
   opt_parser.add_option("--auth-protocol",
                      help="Authentication Protocol (md5|sha)",
                      action="store", type="string",
                      dest="auth_protocol")

   opt_parser.add_option("--priv-protocol",
                      help="Privacy Protocol (des|aes)",
                      action="store", type="string",
                      dest="priv_protocol")

   opt_parser.add_option("--auth-key",
                      help="Authentication Passphrase",
                      action="store", type="string",
                      dest="auth_key")

   opt_parser.add_option("--priv-key",
                      help="Privacy Passphrase",
                      action="store", type="string",
                      dest="priv_key")

   opt_parser.add_option("--security-level",
                      help="Security Level (noAuthNoPriv|authNoPriv|authPriv)",
                      action="store", type="string",
                      dest="security_level")

   opt_parser.add_option("--context",
                      help="Context Name",
                      action="store", type="string",
                      dest="context")

# snmp v1 and v2c specific options
else:
   version = 1
   opt_parser.add_option("--community",
                          help="Community string",
                          action="store", type="string",
                          dest="community")

(options, remaining_args) = opt_parser.parse_args(args)

if len(remaining_args) != 0:
   pscheduler.fail("Unusable arguments: %s" % " ".join(remaining_args))


result = { 'schema': 1 }


if options.host is not None:
   result['host'] = options.host

if options.host_node is not None:
   result['host-node'] = options.host_node

if options.dest is not None:
   result['dest'] = options.dest

if options.version is not None:
   result['version'] = options.version

if options.oid is not None:
   result['oid'] = options.oid.split(',')

if options.protocol is not None:
   result['protocol'] = options.protocol

if options.timeout is not None:
   result['timeout'] = options.timeout

if options.vartype is not None:
   result['vartype'] = options.vartype.split(',')

if options.varvalue is not None:
   result['varvalue'] = options.varvalue.split(',')

if version == 1:
  if options.community is not None:
    result['_community'] = options.community

else:
    if options.security_name is not None:
      result['security-name'] = options.security_name

    if options.auth_protocol is not None:
      result['auth-protocol'] = options.auth_protocol

    if options.priv_protocol is not None:
      result['priv-protocol'] = options.priv_protocol

    if options.auth_key is not None:
      result['auth-key'] = options.auth_key

    if options.priv_key is not None:
      result['priv-key'] = options.priv_key

    if options.security_level is not None:
      result['security-level'] = options.security_level

    if options.context is not None:
      result['context'] = options.context

# convert OIDs to numeric form
# argv = ["snmptranslate", "-On", "-IR"]
# for oid in result['oid']:
#     match = re.match("^((\.\d)|\d)+(\.\d+)*$", oid)
#     if match is None: 
#         argv.append(oid) 

# if len(argv) > 3:
#     status, stdout, stderror = pscheduler.run_program(argv)
#     if status:
#         pscheduler.fail('Translation Error: Try using only numeric OIDs')

#     result['oid'] = []
#     stdout = stdout.split("\n")
#     for oid in stdout:
#         if len(oid) > 0:
#             result['oid'].append(oid)

pscheduler.succeed_json(result)
