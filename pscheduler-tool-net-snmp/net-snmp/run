#!/usr/bin/python
#
# Run a test.  Just the test spec is provided on stdin.
#

import datetime
import json
import sys
import time

import pscheduler

# from stdin
input = pscheduler.json_load(exit_on_error=True)

try:
    version = input['test']['spec']['version']
    dest = input['test']['spec']['dest']
    oid = input['test']['spec']['oid']
    if version == '1' or version == '2c':
        community = input['test']['spec']['community']

except KeyError:
    pscheduler.fail('Missing data in input')

timeout_iso = input['test']['spec'].get("timeout", "PT5S" )
timeout = pscheduler.timedelta_as_seconds( pscheduler.iso8601_as_timedelta(timeout_iso) )
start_time = datetime.datetime.now()

# Perform the test
"""
for val in oid:
    if val != '.' and val.isdigit() == False:
	pscheduler.fail('OID is not numeric.')


convertedOIDs = []
for key in input['test']['spec'].keys():
    if key == 'oid':
        test-translate = ['snmptranslate', '-IR', oid]
        try:
            tr1 = run_program(test-translate)
        except:
            pass
        
        test-translate = ['snmptranslate', 'On', tr1]
        try:
            tr2 = run_program(test-translate)
        except:
            pscheduler.fail('Failed to translate OID to numeric form. Try entering the numeric form directly.')
"""    	

error = None
argv = ['snmpget']
if version == '1' or version == '2c':
    op_dict = {'version': '-v',
               'community': '-c',
               }
else:
    op_dict = {'version': '-v',
               'sn': '-u',
               'sp': '-a',
               'pp': '-x',
               'ak': '-A',
               'pk': '-X',
               'sl': '-l',
               'context': '-n'
               }

# if no protocol specified, default is udp
try:
    protocol = input['test']['spec']['protocol']
except KeyError:
    protocol = None

# loop through spec to get command line args
for key in input['test']['spec'].keys():
    try:
        argv.append(op_dict[key])
    except KeyError:
        # if key does not exist in dictionary, no switch is needed
        # do not append schema
        if key == 'schema' or key == 'protocol':
            continue
    if key == 'dest' and protocol != None:
        argv.append(str(protocol) + ':' + input['test']['spec'][key])
    elif key == 'oid':
        for item in input['test']['spec'][key]:
            argv.append(item)
    else:
        argv.append(input['test']['spec'][key])
    
try:
    status, stdout, stderr = pscheduler.run_program(argv)
    succeeded = True
except Exception as e:
    succeeded = False
    data = None
    error = "The snmpget command failed during execution." 

if status:
    data = None
    succeeded = False
    error = "snmpget returned an error: \n%s" % stderr.strip('\n')

end_time = datetime.datetime.now()

#
# Produce results
#

if succeeded:
    stdout = stdout.strip('\n').split('\n')
    data = []
    for item in stdout:
        obj_dict = {}
        data_list = item.split('=')
        obj_dict["oid"] = data_list[0].strip()
        data_list = data_list[1].split(":")
        try:
            obj_dict["value"] = data_list[1].strip()
            obj_dict["type"] = data_list[0].strip()
        except IndexError:
            obj_dict["type"] = "None"
            obj_dict["value"] = data_list[0].strip()
        
        data.append(obj_dict)

results = {
    'succeeded': succeeded,
    'result': {
	    'schema': 1,
	    'time': pscheduler.timedelta_as_iso8601( end_time - start_time ),
	    'succeeded' : succeeded,
        'data': data
    },
    'error': error
}

pscheduler.succeed_json(results)

